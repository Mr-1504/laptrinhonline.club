def getMaxDanger(mask, last):
    if DP[mask][last] != -1:
        return DP[mask][last]

    if mask & (mask - 1) == 0:
        DP[mask][last] = 1
        return 1

    max_danger = 0
    for i in range(n):
        if (mask & (1 << i)) == 0 and connected[last][i]:
            new_mask = mask | (1 << i)
            max_danger = max(max_danger, 2 * getMaxDanger(new_mask, i))

    DP[mask][last] = max_danger
    return max_danger

# Input
n, m = map(int, input().split())
connected = [[False for _ in range(n)] for _ in range(n)]

for _ in range(m):
    a, b = map(int, input().split())
    connected[a - 1][b - 1] = connected[b - 1][a - 1] = True

# Initialize DP table
DP = [[-1 for _ in range(n)] for _ in range(1 << n)]

# Find maximum danger
max_danger = 0
for i in range(n):
    max_danger = max(max_danger, getMaxDanger(1 << i, i))

print(max_danger)
